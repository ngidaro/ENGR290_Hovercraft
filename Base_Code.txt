function sysCall_init() --initialize all of the settings
--do some intitialization here

	joint = sim.getObjectHandle('Fan_joint')--initialize the fan handle
	sonar = sim.getObjectHandle('Front_sensor)--initialize the front sensor
	sensor = sim.getObectHandle('Side_sensor)--initialize the side sensor
	max_dist = 0.3 --this sets the max distance for the front sensor
	fan_velocity = setJointTargetVelocity('Back_Fan_Speed')--sets the stardard speed of the fan 
	state = 1 --this will initialize the robot to follow the wall
	tolerance = 1 --this is for how much error we want for the getDistance function

end

function sysCall_actuation() --being called every time the simulation is running
	
	local fan_velocity, fan_position
	if(state==1)then
		back_fan = follow_wall() --will make it go straigth
	elseif(state==2)then
		back_fan=turn() --will make it turn right based at the 90 degree corner
	elseif(state==3)
		back_fan=curve() --will make it turn left around a wall
	else
		backfan=stop() --will be state 4, which will be when its out of the course
	end

	sim.setJointTargetPosition(joint, fan_position )
	--setting the position of the fan

	sim.setJointTargetVelovity(fan_velocity, fan_velocity)
	--setting the velocity of the fan

end

function sysCall_sens() --intitialize all of the senosr settings

if(state==1)then
	lastTime=sim.getSimulationTime()
	if (wall_front) then
		state = 2
	end
	if not (wall_Side) then
		state=3
	end
elseif (state==2)then
	local time_elapsed = ((sim.getSimulationTime() - lastTime) >minTurnTime)
	if (wall_side and time_elasped) then
		state = 1
	end
	elseif (state==3) then 
	local time_elapsed = ((sim.getSimulationTime() - lastTime) >minCurveTime)
	if (wall_side and time_elapsed) then 
		state =1
	end
end


function getDistance(sensor, max_dist) --ideally will be used for the sonar senor in front
	local detected_1, detected_2, start_distance, end_distance, start_time, net_time --created the local variables
	start_time = sim.getSimulationTime() --get the time when you call the function
	start_distance, detected_1 = sim.readProximitySensor(sensor) --gets the value of the sonar and makes it equal to the starting value
	
	if (detected_1<1)then --checks if the distance is within the region --checks to make sure we are geting distance without errors
		distance_start = max_dist --makes the local distance into the max_distance (prevents errors, can't be less than 1)
	end

	if(sim.getSimulationTime()== start_time +1) --gets the distacne from the wall, one second after the first instance of the function was called (can make it faster)
		end_distance = sim.readProximitySensor(sensor) --get the distance at the second instance
		if (detected_2_1<1)then --checks if the distance is within the region --checks to make sure we are geting distance without errors
			end_distance = max_dist --makes the local distance into the max_distance (prevents errors, can't be less than 1)
		end
	end

	if (end_diastance - start_distance < tolerance) --we are making sure that the 2 instances are forsure in a region (makes sure we properly stay in the correct state)
		net_time =  true --retunrs a boolean true if under tolerance
	else
		net_time = false --returns a boolean false if over tolerance
	end
	return start_distance --will either retunr the max_dist or what it reads from the sensor
	return net_time --this will return either a true or a false
end


function follow_wall()
--dfr is the side sensor first time it take the value for distance
--drr is the second value the side sensor takes for the distane 
--a is the distance tranveled of the hovercraft
--phi should be the angle in which the joint of the fan needs to turn to correct iteself
--d is the differnence between the mean distance and the desired wall distance
--kWall is apparently a constant to make the distance proportional to gamma
--v is the velocity of the fan
--e is a parameter that if you make it bigger, it will make it much more stable

local phi, d, alpha, position, velocity
phi=math.atan((dfr - drr)/a)
d = (o.5*(dfr+drr)-dwalside))

gamma = kWall*d
alpha = phi +gamme

--apparently these are the eqautions for the wheels, need to figure out how to apply it to the fan

VL = (v/wheel_radius)*(math.cos(alpha)+(b/e)*math.sin(alpha))
VR = (v/wheel_radius)*(math.cos(alpha)-(b/e)*math.sin(alpha))
return VL, VR
end

--need to create the wall_side, wall_front, functions based on the distances

--need to create the curve function (left side) and the turn function (right side)

end

function wall_front() --checks if there is a wall in the front
local distance, time
	distance, time = get_distance(sonar, max_dist) --gets the distance and boolean from the function
	if (distance < 3 and time) --checks if the distance (and makes sure its not an error) and boolean are true
		return true --there is a wall in front
	else
		retrun false --there is not wall in front
	end
end

function wall_side() --checks if there is a wall on the side
local disance, time
	distance, time = get_distance(sensor, max_dist)--gets the distance and boolean from the function
	if (distance < 3 and time)--checks if the distance (and makes sure its not an error) and boolean are true
		return true -- there is a wall on the side
	else
		retrun false --there is not wall on the side
	end
end
	